@import "node_modules/mathsass/dist/math";

.flow-modeler {
    display: grid;
    padding: 2em 1em;
    align-content: stretch;
    justify-content: stretch;

    $strokeColor: #01579b;
    $dropStrokeColor: #00b0ff;
    $strokeStrength: 0.25em;
    $arrowSize: 1.5 * $strokeStrength;
    $strokeLength: 1.75em;
    $elementSizeFactor: 2.5;
    $standardElementSize: $elementSizeFactor * 1em;
    $gatewayBorderSize: sqrt($elementSizeFactor * $elementSizeFactor * 2) * 1em / 2;
    $standardElementColor: #808080;
    $selectionColor: #ffab00;

    & .grid-cell {
        display: flex;
        align-items: center;
        align-content: center;
        min-height: $strokeLength;
        position: relative;
    }
    & .flow-element-wrapper {
        display: flex;
        align-items: center;
        position: relative;
    }

    & .flow-element {
        display: flex;
        position: relative;
        margin: $strokeStrength 0;

        &.start-element {
            border: ($strokeStrength / 2) solid $standardElementColor;
            height: $standardElementSize - $strokeStrength;
            width: $standardElementSize - $strokeStrength;
            border-radius: 50%;
        }
        &.end-element {
            box-shadow: 0 0 0 ($strokeStrength * 0.9) $standardElementColor;
            border: ($strokeStrength * 0.9) solid white;
            background-color: $standardElementColor;
            height: $standardElementSize - (4 * 0.9 * $strokeStrength);
            width: $standardElementSize - (4 * 0.9 * $strokeStrength);
            border-radius: 50%;
            margin: $strokeStrength ($strokeStrength * 0.9);
        }
        &.step-element {
            border: ($strokeStrength / 3) solid $standardElementColor;
            border-radius: 0.25em;
            min-width: $standardElementSize;
            min-height: $standardElementSize / 2;
        }
        &.gateway-element {
            position: relative;
            height: $standardElementSize;
            width: $standardElementSize;
            margin: 0 $strokeStrength / 2;
            z-index: 1;

            display: flex;
            align-items: center;
            justify-content: center;

            &::before {
                content: "";
                position: absolute;
                transform: rotate(45deg);
                border: ($strokeStrength / 2) solid $standardElementColor;
                height: $gatewayBorderSize;
                width: $gatewayBorderSize;
                background-color: transparent;
            }
            &::after {
                content: "X";
                position: absolute;
                font: bold 1.75em Arial, sans-serif;
                color: $standardElementColor;
            }
        }
        &.start-element.selected,
        &.step-element.selected,
        &.gateway-element.selected::before {
            border-color: $selectionColor;
        }
    }
    & .menu {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        left: calc(100% + #{$strokeStrength});
        width: 1em;
        margin: auto;
        border: ($strokeStrength / 3) solid $selectionColor;
        border-radius: 0.25em;
        background-color: white;
        box-shadow: 0.1em 0.1em 0.25em 0.25em rgba(0, 0, 0, 0.25);
        z-index: 1;
        padding: $strokeStrength;

        &-item {
            font-family: Arial, Helvetica, sans-serif;
            line-height: 1.1em;
            cursor: pointer;
    
            &.add-branch::before {
                content: "↳";
            }
            &.add-step::before {
                content: "■";
            }
            &.add-gateway::before {
                content: "◆";
            }
            &.change-next::before {
                content: "⇥";
            }
            &.remove::before {
                content: "×";
            }
        }
    }
    & .gateway-element.diverging + .menu {
        top: ($strokeStrength * 3) + (1.1em / 2);
    }
    & .stroke-horizontal::before,
    & .stroke-vertical::before {
        background-color: $strokeColor;
    }
    &.editable .stroke-horizontal.selected::before {
        background-color: $selectionColor;
    }
    & .stroke-horizontal {
        position: relative;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        min-width: $strokeLength;

        &.optional {
            min-width: 0;
        }
        &.arrow {
            margin-right: $arrowSize;
    
            &::after {
                content: "";
                height: 0;
                width: 0;
                position: absolute;
                right: 0;
                top: calc(50% - #{$arrowSize});
                margin-right: -$arrowSize;
                border-top: $arrowSize solid transparent;
                border-left: $arrowSize solid $strokeColor;
                border-bottom: $arrowSize solid transparent;
            }
            &.can-drop::after {
                border-left-color: $dropStrokeColor;
            }
        }
        &::before {
            position: absolute;
            content: "";
            height: $strokeStrength;
            width: 100%;
            top: calc(50% - #{$strokeStrength / 2});
        }
        &.can-drop::before {
            background: linear-gradient(90deg, $strokeColor 0%, $dropStrokeColor 62%);
        }
        & > .top-label {
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            align-content: center;
            padding: 0 0.25em;
            margin-bottom: $strokeStrength / 2;
            min-height: $strokeStrength * 4;
        }
        & > .bottom-spacing {
            display: flex;
            flex-direction: column;
            margin-bottom: $strokeStrength / 2;
        }
        & .clickable-spacing {
            min-height: $strokeStrength * 4;
            max-height: $strokeStrength * 8;
            width: 100%;
        }
    }
    & .stroke-vertical {
        position: relative;
        display: flex;
        flex-direction: column;
        align-self: stretch;
        width: $strokeStrength;
        &::before {
            position: absolute;
            content: "";
            width: $strokeStrength;
        }
        &.top-half::before {
            height: calc(50% + #{$strokeStrength / 2});
            top: 0;
        }
        &.full-height::before {
            height: 100%;
            top: 0;
        }
        &.bottom-half::before {
            height: calc(50% + #{$strokeStrength / 2});
            bottom: 0;
        }
    }
    &.editable {
        & .flow-element,
        & .top-label,
        & .clickable-spacing {
            cursor: context-menu;
        }
        & .flow-element.end-element,
        & .selected.flow-element,
        & .selected .top-label,
        & .selected .clickable-spacing {
            cursor: inherit;
        }
        & .start-element.selected,
        & .start-element:hover,
        & .step-element.selected,
        & .step-element:hover,
        & .gateway-element.selected::before,
        & .gateway-element:hover::before {
            box-shadow: 0 0 0.1em 0.1em rgba(0, 0, 0, 0.25);
        }
        & .flow-element-wrapper.can-drop > .step-element,
        & .flow-element-wrapper.can-drop > .gateway-element::before {
            box-shadow: 0 0 0.125em 0.125em rgba(0, 176, 255, 0.5);
        }
        & .flow-element-wrapper.can-drop > .end-element {
            box-shadow:
                0 0 0 ($strokeStrength * 0.9) $standardElementColor,
                0 0 0.125em ($strokeStrength * 0.9 + 0.125em) rgba(0, 176, 255, 0.5);
        }
        & .dragging {
            color: $dropStrokeColor;
        }
        & .flow-element-wrapper.cannot-drop,
        & .flow-element-wrapper.cannot-drop > .flow-element {
            cursor: no-drop;
        }
    }
}
